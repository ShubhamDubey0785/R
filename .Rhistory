y<-c("jodhpur","jaipur",'ajmer',"bikaner","kota")
cbind(emp.data,y)
rbind(emp.data, x)
cbind(emp.data,y)
cbind(emp.data,y=address)
cbind(emp.data,address=y)
# delete row or column from the data.frame()
emp.data<-emp.data[-2,]
# delete row or column from the data.frame()
emp.data<-emp.data[-2,]
emp.data
# delete row or column from the data.frame()
emp.data<-emp.data[-2,]
emp.data
rbind(emp.data, x)
y<-c("jodhpur","jaipur",'ajmer',"bikaner","kota")
emp.data<-data.frame(
employee_id=c(1:5),
employee_name=c("ram","mohan","sohan","rohan","hitesh"),
sal=c(523.3, 913.2, 641.0, 529.0, 453.25),
starting_date=as.Date(c("2012-01-01","2013-09-23","2014-08-19","2015-03-27","2017-08-28")),
stringsAsFactors = FALSE
)
# printing the data frame
print(emp.data)
emp.data$starting_date<-NULL
emp.data
print(summary(emp.data))
install.packages("shiny")
install.packages("shiny")
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Simple Calculator"),
sidebarLayout(
sidebarPanel(
numericInput("num1", "Enter first number:", value = 0),
numericInput("num2", "Enter second number:", value = 0),
selectInput("operation", "Select operation:", choices = c("Add", "Subtract", "Multiply", "Divide"))
),
mainPanel(
textOutput("result")
)
)
)
# Define server logic
server <- function(input, output) {
output$result <- renderText({
num1 <- input$num1
num2 <- input$num2
result <- switch(input$operation,
"Add" = num1 + num2,
"Subtract" = num1 - num2,
"Multiply" = num1 * num2,
"Divide" = {
if (num2 != 0) {
num1 / num2
} else {
"Error: Cannot divide by zero"
}
})
paste("Result:", result)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Factors in R
dair<-c("north", "west", "east", "south")
is.factor(dair)
# Factors in R
dir<-c("north", "west", "east", "south")
is.factor(dir)
factor(dir)
isfactor(dir)
is.factor(dir)
# Factors in R
dir<-c("north", "west", "east", "south")
is.factor(dir)
factor(dir)
is.factor(dir)
is.factor(dir)
factor(dir,levels=c("north", "west", "east", "south"))
# Factors in R
dir<-c("north", "west", "east", "north")
is.factor(dir)
factor(dir)
is.factor(dir)
factor(dir,levels=c("north", "west", "east", "south"))
factor(dir,levels=c("north", "west", "east", "south"), labels=c("N", "W", "E", "S"))
factor(dir,levels=c("north", "west", "east", "south"),exclude="north")
# To generate factor levels
# gl() n, k, labels
v1<-gl(3,4,labels=c("ram", "mohan", "sohan"))
v1
# To generate factor levels
# gl() n, k, labels
v1<-gl(2,4,labels=c("ram", "mohan", "sohan"))
v1
dir1<-c("north", "west", "east", "north")
data1<-factor(dir1)
data1
data1[c(2,4)]
data1[-1]
data1[-1]
data1[2]
data1[2]<-"east"
data1[2]
# functions
is.factor(data1)
library(shiny); runApp('D:/Sem 4/R/chatgpt.R')
library(shiny)
# Define UI
ui <- fluidPage(
titlePanel("Simple Calculator"),
sidebarLayout(
sidebarPanel(
numericInput("num1", "Enter first number:", value = 0),
numericInput("num2", "Enter second number:", value = 0),
selectInput("operation", "Select operation:", choices = c("Add", "Subtract", "Multiply", "Divide"))
),
mainPanel(
textOutput("result")
)
)
)
# Define server logic
server <- function(input, output) {
output$result <- renderText({
num1 <- input$num1
num2 <- input$num2
result <- switch(input$operation,
"Add" = num1 + num2,
"Subtract" = num1 - num2,
"Multiply" = num1 * num2,
"Divide" = {
if (num2 != 0) {
num1 / num2
} else {
"Error: Cannot divide by zero"
}
})
paste("Result:", result)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# getwd() function to know the current working directory
# setwd() function to set the current working directory
getwd()
setwd("D:\Sem 4\R")
setwd("D:\Sem 4\R")
setwd("D:\\Sem 4\\R")
getwd()
# sorting
v<-c(12, 34, 56, 32, 35, 98, 33, 57, 14, 59, 13, 21)
v
sort(v)
sort(v, decreasing = T)
order(v)
# order() will sort the given numbers according to its index in the ascending order.
order(v)
v[order(v)]
rank(v)
v(rank(v))
v[rank(v)]
print(is.data.frame("stores"))
# read csv file
stores<-read.csv("stores.csv")
# read csv file
stores<-read.csv("stores")
# read csv file
stores<-read.csv("stores.csv")
# read csv file
stores<-read.csv("stores.csv")
# read csv file
stores<-read.csv("stores.csv")
# read csv file
stores<-read.csv("stores.csv")
getwd()
# read csv file
stores<-read.csv("stores.csv")
# read csv file
getwd()
# read csv file
stores<-read.csv("stores.csv")
# read csv file
stores<-read.csv("stores.csv")
# read csv file
stores<-read.csv("stores.csv",  fileEncoding = "UTF-8")
# read csv file
stores<-read.csv("stores.csv",  fileEncoding = "UTF-8")
